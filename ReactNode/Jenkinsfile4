pipeline {
    agent any

    environment {
        AZURE_CREDENTIALS_ID = 'azure-prod-sp'
        AZURE_SUBSCRIPTION = 'f12a172b-b284-45ca-8c4b-3833481d3088' // Your subscription ID
    }
    
    stages {

        stage('Checkout') {
            steps {
                script {
                    failedStage = "Checkout"
                }
                git branch: 'main', credentialsId: '3ddb38d7-5108-4fae-865b-0120e45b2a0f', url: 'https://github.com/aathawerani/DevSecOps.git'
            }
        }

        stage('Login to Azure') {
            steps {
                withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                    bat """
                        call az login --service-principal ^
                            -u ${AZURE_CLIENT_ID} ^
                            -p ${AZURE_CLIENT_SECRET} ^
                            --tenant ${AZURE_TENANT_ID}
                        call az account set --subscription ${AZURE_SUBSCRIPTION}
                    """
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                dir('ReactNode/terraform') {
                    withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                        try {
                            bat """
                                D:\\DevOps\\terraform\\terraform init
                                D:\\DevOps\\terraform\\terraform destroy -auto-approve \
                                    -var="resource_group_name=${RESOURCE_GROUP}"
                            """
                        }
                        catch (Exception e) {
                            echo "Caught exception: ${e}"

                        }
                    }
                }
            }
        }

        stage('Delete Terraform Backend') {
            steps {
                withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                    try {
                        bat """
                            echo "Deleting backend container and storage account..."
                            az storage container delete ^
                                --name tfstate ^
                                --account-name ${STORAGE_ACCOUNT} ^
                                --yes

                            az storage account delete ^
                                --name ${STORAGE_ACCOUNT} ^
                                --resource-group ${RESOURCE_GROUP} ^
                                --yes
                        """
                    }
                    catch (Exception e) {
                        echo "Caught exception: ${e}"

                    }
                }
            }
        }

        stage('Delete All Resource Groups') {
            steps {
                bat """
                    az acr delete --name ${AZURE_REGISTRY} --resource-group ${RESOURCE_GROUP} --yes
                """
                script {
                    // Get all resource groups in the subscription
                    def resourceGroups = bat(
                        script: 'az group list --query "[].name" -o tsv',
                        returnStdout: true
                    ).trim().split('\n')
                    
                    // Force delete each resource group and all its contents
                    resourceGroups.each { rg ->
                        if (rg) {
                            bat """
                                echo "FORCE DELETING RESOURCE GROUP: ${rg}"
                                az group delete --name "${rg}" --yes --no-wait --force-deletion-types Microsoft.Compute/virtualMachines
                            """
                        }
                    }
                }
            }
        }

        stage('Delete Orphaned Resources') {
            steps {
                script {
                    // Delete any remaining ungrouped resources
                    bat '''
                        echo "Cleaning up orphaned resources..."
                        az resource list --query "[?resourceGroup==null].id" -o tsv | %% {
                            if ($_) { az resource delete --ids $_ --verbose }
                        }
                    '''
                }
            }
        }

        stage('Verify Destruction') {
            steps {
                script {
                    def rgExists = bat(
                        script: "az group exists --name ${RESOURCE_GROUP}",
                        returnStdout: true
                    ).trim()
                    
                    if (rgExists == "true") {
                        error("Resource group still exists after destruction!")
                    } else {
                        echo "Resource group ${RESOURCE_GROUP} successfully deleted"
                    }
                }
            }
        }
    }
    
    post {
        always {
            emailext body: """
                Resource destruction ${currentBuild.currentResult} 
                
                Resource Group: ${RESOURCE_GROUP}
                
                Jenkins build: ${BUILD_URL}
            """,
            subject: "Destruction ${currentBuild.currentResult}: PaymentGateway ",
            to: "athawerani@gmail.com"
        }
    }
}