pipeline {
    agent any
    parameters {
        string(
            name: 'SOURCE_BUILD_NUMBER',
            description: 'Enter the build number from the CREATE pipeline that you want to destroy'
        )
    }
    
    environment {
        AZURE_CREDENTIALS_ID = 'azure-prod-sp'
        AZURE_SUBSCRIPTION = 'f12a172b-b284-45ca-8c4b-3833481d3088'
    }

    stages {
        stage('Fetch Deployment Info') {
            steps {
                script {
                    // Step 1: Copy parameters file from source build
                    copyArtifacts(
                        projectName: 'paymentgateway-create', // Match your create job name
                        filter: 'deployment_params.json',
                        selector: specific(params.SOURCE_BUILD_NUMBER)
                    )
                    
                    // Step 2: Load all parameters from the file
                    def deployInfo = readJSON file: 'deployment_params.json'
                    env.DEPLOYMENT_ID = deployInfo.deployment_id
                    env.RESOURCE_GROUP = deployInfo.resource_group
                    env.STORAGE_ACCOUNT = deployInfo.storage_account
                    env.TF_STATE_KEY = deployInfo.tf_state_key
                    env.ACR_NAME = deployInfo.acr_name
                    env.SQL_SERVER = deployInfo.sql_server
                    
                    // Step 3: Verify we got the parameters
                    if (!env.RESOURCE_GROUP?.trim()) {
                        error("Failed to load deployment parameters from build ${params.SOURCE_BUILD_NUMBER}")
                    }
                    
                    currentBuild.displayName = "DESTROY-${env.DEPLOYMENT_ID}"
                    echo """
                    Loaded deployment to destroy:
                    - Deployment ID: ${env.DEPLOYMENT_ID}
                    - Resource Group: ${env.RESOURCE_GROUP}
                    - Storage Account: ${env.STORAGE_ACCOUNT}
                    - ACR: ${env.ACR_NAME}
                    - SQL Server: ${env.SQL_SERVER}
                    """
                }
            }
        }
        
        stage('Confirm Destruction') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        input(
                            message: "CONFIRM DESTRUCTION OF DEPLOYMENT ${env.DEPLOYMENT_ID}?",
                            ok: "Destroy Resources",
                            parameters: [
                                text(
                                    name: 'CONFIRMATION',
                                    defaultValue: 'Type \"destroy ${env.DEPLOYMENT_ID}\" to confirm',
                                    description: 'Safety check'
                                )
                            ]
                        )
                    }
                }
            }
        }

        // [Keep all your existing destruction stages unchanged]
        stage('Terraform Destroy') {
            steps {
                dir('terraform') {
                    withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                        bat """
                            D:\\DevOps\\terraform\\terraform init -reconfigure ^
                                -backend-config="resource_group_name=${env.RESOURCE_GROUP}" ^
                                -backend-config="storage_account_name=${env.STORAGE_ACCOUNT}" ^
                                -backend-config="container_name=tfstate" ^
                                -backend-config="key=${env.TF_STATE_KEY}"
                            
                            D:\\DevOps\\terraform\\terraform destroy -auto-approve
                        """
                    }
                }
            }
        }

        stage('Cleanup Azure Resources') {
            steps {
                withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                    script {
                        // Delete ACR
                        bat """
                            az acr delete --name ${env.ACR_NAME} --resource-group ${env.RESOURCE_GROUP} --yes || echo "ACR already deleted"
                        """
                        
                        // Delete storage account
                        bat """
                            az storage account delete --name ${env.STORAGE_ACCOUNT} --resource-group ${env.RESOURCE_GROUP} --yes || echo "Storage already deleted"
                        """
                        
                        // Delete SQL server
                        bat """
                            az sql server delete --name ${env.SQL_SERVER} --resource-group ${env.RESOURCE_GROUP} --yes || echo "SQL server already deleted"
                        """
                        
                        // Finally delete resource group
                        bat """
                            az group delete --name ${env.RESOURCE_GROUP} --yes --no-wait
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            emailext body: """
                Destruction ${currentBuild.currentResult}
                
                Deployment ID: ${env.DEPLOYMENT_ID}
                Original Build: #${params.SOURCE_BUILD_NUMBER}
                Resources Destroyed:
                - Resource Group: ${env.RESOURCE_GROUP}
                - ACR: ${env.ACR_NAME}
                - SQL: ${env.SQL_SERVER}
                
                Jenkins build: ${BUILD_URL}
            """,
            subject: "Destruction ${currentBuild.currentResult}: ${env.DEPLOYMENT_ID}",
            to: "athawerani@gmail.com"
        }
    }
}