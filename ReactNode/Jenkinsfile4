properties([
    parameters([
        string(
            name: 'DEPLOYMENT_ID',
            defaultValue: '',
            description: 'Deployment ID from create pipeline'
        ),
        string(
            name: 'RESOURCE_GROUP',
            defaultValue: '',
            description: 'Resource group to destroy'
        ),
        string(
            name: 'STORAGE_ACCOUNT',
            defaultValue: '',
            description: 'Storage account containing state'
        )
    ])
])

pipeline {
    agent any
    stages {
        stage('Verify Parameters') {
            steps {
                script {
                    if (!params.DEPLOYMENT_ID) {
                        error("Please provide DEPLOYMENT_ID parameter")
                    }
                    
                    // Optionally fetch other parameters if only DEPLOYMENT_ID is provided
                    if (!params.RESOURCE_GROUP) {
                        def build = currentBuild.rawBuild.project.getBuildByNumber(params.SOURCE_BUILD_NUMBER.toInteger())
                        def artifact = build.getArtifacts().find { it.name == 'deployment_params.json' }
                        def deployInfo = readJSON text: artifact.getFile().text
                        env.RESOURCE_GROUP = deployInfo.resource_group
                        env.STORAGE_ACCOUNT = deployInfo.storage_account
                    }
                }
            }
        }
                
        stage('Confirm Destruction') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        input(
                            message: "CONFIRM DESTRUCTION OF ${env.DEPLOYMENT_ID}?",
                            ok: "Destroy Resources",
                            parameters: [
                                text(
                                    name: 'CONFIRMATION',
                                    defaultValue: 'Type \"destroy ${env.DEPLOYMENT_ID}\" to confirm',
                                    description: 'Safety check'
                                )
                            ]
                        )
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                dir('terraform') {
                    withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                        bat """
                            D:\\DevOps\\terraform\\terraform init -reconfigure ^
                                -backend-config="resource_group_name=${env.RESOURCE_GROUP}" ^
                                -backend-config="storage_account_name=${env.STORAGE_ACCOUNT}" ^
                                -backend-config="container_name=tfstate" ^
                                -backend-config="key=${env.TF_STATE_KEY}"
                            
                            D:\\DevOps\\terraform\\terraform destroy -auto-approve
                        """
                    }
                }
            }
        }

        stage('Cleanup Azure Resources') {
            steps {
                withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                    script {
                        // Delete ACR
                        bat """
                            az acr delete --name ${env.ACR_NAME} --resource-group ${env.RESOURCE_GROUP} --yes || echo "ACR already deleted"
                        """
                        
                        // Delete storage account
                        bat """
                            az storage account delete --name ${env.STORAGE_ACCOUNT} --resource-group ${env.RESOURCE_GROUP} --yes || echo "Storage already deleted"
                        """
                        
                        // Delete SQL server
                        bat """
                            az sql server delete --name ${env.SQL_SERVER} --resource-group ${env.RESOURCE_GROUP} --yes || echo "SQL server already deleted"
                        """
                        
                        // Finally delete resource group
                        bat """
                            az group delete --name ${env.RESOURCE_GROUP} --yes --no-wait
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            emailext body: """
                Destruction ${currentBuild.currentResult}
                
                Deployment ID: ${env.DEPLOYMENT_ID}
                Original Build: #${params.SOURCE_BUILD}
                Resources Destroyed:
                - Resource Group: ${env.RESOURCE_GROUP}
                - ACR: ${env.ACR_NAME}
                - SQL: ${env.SQL_SERVER}
                
                Jenkins build: ${BUILD_URL}
            """,
            subject: "Destruction ${currentBuild.currentResult}: ${env.DEPLOYMENT_ID}",
            to: "athawerani@gmail.com"
        }
    }
}

// Helper function (or use the string parameter alternative if this doesn't work)
def getSuccessfulBuilds() {
    def job = Jenkins.instance.getItemByFullName('paymentgateway-create')
    def builds = job.getBuilds().findAll { it.result == Result.SUCCESS }
    return builds.collect { it.number.toString() }.take(20).reverse()
}