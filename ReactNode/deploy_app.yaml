---
- name: Deploy React-Node App with SQL Server
  hosts: localhost
  vars:
    kubeconfig_path: "/home/aaht14/.kube/config"
    sql_timeout: 180  # Increased timeout to 3 minutes
  tasks:

    # Clean up previous SQL Server deployment first
    - name: Delete old SQL Server deployment
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Deployment
        name: sqlserver
        namespace: default
        state: absent
      ignore_errors: yes
      changed_when: false  # Don't fail if not exists

    - name: Wait for old pods to terminate
      command: kubectl wait --for=delete pod -l app=sqlserver --timeout=60s
      ignore_errors: yes
      register: pod_termination
      changed_when: "'error: no matching resources found' not in pod_termination.stderr"

    # ✅ Apply Configurations
    - name: Apply Kubernetes ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/configmap.yaml

    - name: Apply Kubernetes Secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/secret.yaml

    - name: Apply SQL Server ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/sqlserver-configmap.yaml

    - name: Apply SQL Server Secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/sqlserver-secret.yaml

    # ✅ Deploy SQL Server
    - name: Apply SQL Server PVC
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        namespace: default
        src: k8s/sqlserver-pvc.yaml

    - name: Deploy SQL Server
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        namespace: default
        src: k8s/sqlserver-deployment.yaml

    # ✅ Enhanced SQL Server Verification
    - name: Check SQL Server initialization logs
      command: kubectl logs -l app=sqlserver --tail=20
      register: sql_logs
      until: "'Setup step is COMPLETED' in sql_logs.stdout"
      retries: 12
      delay: 10
      ignore_errors: yes

    - name: Wait for SQL Server Pod to be Ready
      command: kubectl wait --for=condition=ready pod -l app=sqlserver --timeout={{ sql_timeout }}s
      register: sql_ready
      retries: 2
      delay: 10
      until: sql_ready.rc == 0
      ignore_errors: yes

    - name: Verify SQL Server connectivity
      command: >
        kubectl exec -it $(kubectl get pod -l app=sqlserver -o jsonpath='{.items[0].metadata.name}') 
        -- /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$(kubectl get secret sqlserver-secret -o jsonpath='{.data.SA_PASSWORD}' | base64 -d)" -Q "SELECT @@VERSION"
      register: sql_test
      when: sql_ready.rc == 0
      ignore_errors: yes

    # ✅ Deploy Backend and Frontend Services
    - name: Deploy Backend Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/backend-deployment.yaml
      when: sql_ready.rc == 0  # Only deploy backend if SQL is ready

    - name: Deploy Frontend Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/frontend-deployment.yaml

    # ✅ Final Verification
    - name: Get all pod statuses
      command: kubectl get pods -o wide
      register: pod_status
      changed_when: false

    - debug:
        msg: "SQL Server deployment status"
        var: sql_ready
        verbosity: 1

    - debug:
        msg: "Current pod status:"
        var: pod_status.stdout_lines