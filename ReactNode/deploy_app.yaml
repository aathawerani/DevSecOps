---
- name: Deploy React-Node App with SQL Server
  hosts: localhost
  vars:
    kubeconfig_path: "/home/aaht14/.kube/config"
    sql_timeout: 30  # Increased timeout to 3 minutes
    sql_server_port: 1433  # Default SQL Server port
    init_script_path: "init.sql"  # Path to your init.sql script
  tasks:

    - name: Forcefully delete old deployments
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Deployment
        name: "{{ item }}"
        namespace: default
        state: absent
        force: yes  # Force deletion if stuck
        wait: yes  # Wait for deletion to complete
        wait_timeout: 120  # Wait up to 2 minutes
      loop:
        - sqlserver
        - backend
        - frontend
      ignore_errors: yes
      changed_when: false

    - name: Delete associated PVCs
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: PersistentVolumeClaim
        namespace: default
        label_selectors:
          - "app in (sqlserver,backend,frontend)"
        state: absent
      ignore_errors: yes

    - name: Force delete any remaining pods
      command: >
        kubectl delete pod
        --selector='app in (sqlserver,backend,frontend)'
        --grace-period=0
        --force
      when: remaining_pods.stdout != ""
      register: force_delete
      retries: 3
      delay: 10
      until: force_delete.rc == 0
      ignore_errors: yes

    - name: Check for blocking finalizers
      command: >
        kubectl get pods -l "app in (sqlserver,backend,frontend)"
        -o jsonpath='{.items[*].metadata.finalizers}'
      register: finalizers_check
      changed_when: false
      ignore_errors: yes

    - name: Verify all pods are terminated
      command: >
        kubectl wait --for=delete pod
        --selector=app in (sqlserver,backend,frontend)
        --timeout=120s
      register: pod_termination
      retries: 3
      delay: 10
      until: pod_termination.rc == 0
      ignore_errors: yes

    # âœ… Apply Configurations
    - name: Apply Kubernetes ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/configmap.yaml

    - name: Apply Kubernetes Secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/secret.yaml

    - name: Apply SQL Server ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/sqlserver-configmap.yaml

    - name: Apply SQL Server Secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/sqlserver-secret.yaml

    # âœ… Deploy SQL Server
    - name: Apply SQL Server PVC
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        namespace: default
        src: k8s/sqlserver-pvc.yaml

    - name: Deploy SQL Server
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        namespace: default
        src: k8s/sqlserver-deployment.yaml

    - name: Deploy SQL Server Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        namespace: default
        src: k8s/sqlserver-service.yaml

    - name: Wait for SQL Server Pod to be Ready
      command: kubectl wait --for=condition=ready pod -l app=sqlserver --timeout={{ sql_timeout }}s
      register: sql_ready
      retries: 3
      delay: 10
      until: sql_ready.rc == 0
      ignore_errors: yes

    - name: Copy SQL Init Script to SQL Server Pod
      shell: |
        kubectl cp init.sql $(kubectl get pod -n default -l app=sqlserver -o jsonpath='{.items[0].metadata.name}'):/tmp/init.sql -n default
      args:
        executable: /bin/bash

    - name: Get SQL Server SA password
      shell: |
        kubectl get secret sqlserver-secret -o jsonpath="{.data.SA_PASSWORD}" | base64 --decode
      register: sql_password
      changed_when: false
 
     # ðŸŸ¢ Execute SQL Initialization Script in SQL Server
    - name: Execute SQL Initialization Script
      shell: |
        kubectl exec deploy/sqlserver -c sqlserver -- /opt/mssql-tools/bin/sqlcmd \
          -S localhost -U sa -P "{{ sql_password.stdout }}" -i /tmp/init.sql
      retries: 3
      delay: 5
      register: sqlcmd_result
      until: sqlcmd_result.rc == 0

    # âœ… Deploy Backend and Frontend Services
    - name: Deploy Backend Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/backend-deployment.yaml

    - name: Deploy Frontend Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        src: k8s/frontend-deployment.yaml

    # âœ… Final Verification
    - name: Wait for all pods to be ready
      command: kubectl get pods
      register: pod_status
    - debug:
        msg: "{{ pod_status.stdout_lines }}"