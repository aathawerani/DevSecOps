pipeline {
    agent any
    environment {
        GIT_CREDENTIALS_ID = 'github-credentials'
        GITHUB_REPO = 'aathawerani/PaymentGateway'
        GITHUB_TOKEN = credentials('github-token')
        EMAIL_RECIPIENT = 'athawerani@gmail.com'
        FRONTEND_IMAGE = "my-frontend-app"
        BACKEND_IMAGE = "my-backend-app"
        IMAGE_TAG = "${BUILD_NUMBER}"  // Use Build Number for tagging
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    failedStage = "Checkout"
                }
                git branch: 'deployment', credentialsId: '3ddb38d7-5108-4fae-865b-0120e45b2a0f', url: 'https://github.com/aathawerani/PaymentGateway.git'
            }
        }
        
        stage('Docker Build & Push') {
            parallel {
                stage('Frontend Build') {
                    steps {
                        dir('frontend') {
                            bat '''
                                docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} .
                                docker rmi $$(docker images -f "dangling=true" -q) 2>nul || echo "No old images to clean"
                            '''
                        }
                    }
                }
                stage('Backend Build') {
                    steps {
                        dir('backend') {
                            bat '''
                                docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} .
                                docker rmi $$(docker images -f "dangling=true" -q) 2>nul || echo "No old images to clean"
                            '''
                        }
                    }
                }
            }
        }

        stage('Docker Security Scan') {
            parallel {
                stage('Frontend Scan') {
                    steps {
                        bat "\"D:\\DevOps\\trivy\\trivy\" image --no-progress --exit-code 0 --severity HIGH,CRITICAL --format json --output frontend-trivy-report.json %FRONTEND_IMAGE%:%IMAGE_TAG%"
                    }
                }
                stage('Backend Scan') {
                    steps {
                        bat "\"D:\\DevOps\\trivy\\trivy\" image --no-progress --exit-code 0 --severity HIGH,CRITICAL --format json --output backend-trivy-report.json %BACKEND_IMAGE%:%IMAGE_TAG%"
                    }
                }
            }
        }

        stage('Load Docker Images into Kubernetes') {
            steps {
                script {
                    bat """
                    ssh -i C:\\Windows\\System32\\config\\systemprofile\\.ssh\\id_ed25519 -o StrictHostKeyChecking=no aaht14@localhost "kind load docker-image %FRONTEND_IMAGE%:%IMAGE_TAG% && kind load docker-image %BACKEND_IMAGE%:%IMAGE_TAG%"
                    """
                }
            }
        }

        stage('Deploy to Kubernetes using Ansible') {
            steps {
                script {
                    bat "ssh -i C:\\Windows\\System32\\config\\systemprofile\\.ssh\\id_ed25519 -o StrictHostKeyChecking=no aaht14@localhost \"ansible-playbook -i /mnt/d/DevOps/jenkins/.jenkins/workspace/DevSecOps3/inventory.ini /mnt/d/DevOps/jenkins/.jenkins/workspace/DevSecOps3/deploy_app.yaml --extra-vars 'kubeconfig_path=/home/aaht14/.kube/config'\""
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    bat """
                    ssh -i C:\\Windows\\System32\\config\\systemprofile\\.ssh\\id_ed25519 -o StrictHostKeyChecking=no aaht14@localhost "kubectl rollout status deployment/my-frontend-app --timeout=60s && kubectl rollout status deployment/my-backend-app --timeout=60s"
                    """
                }
            }
        }

        stage('OWASP ZAP Security Scan') {
            steps {
                script {
                    failedStage = "OWASP ZAP Security Scan"
                }
                bat '''
                set ZAP_HOMEDIR="D:\\DevOps\\jenkins\\.jenkins\\workspace\\DevSecOps3\\ZAP\\Zed_Home"
                java -jar "D:\\DevOps\\ZAP\\Zed Attack Proxy\\zap-2.16.0.jar" -cmd -quickurl "http://localhost:32356" -quickprogress -quickout zap_report.html -host 127.0.0.1 -port 9090
                '''
            }
        }
    }
    
    post {
        always {
            bat "docker system prune -f --volumes"  // Cleanup unused Docker resources
        }
        success {
            emailext (
                to: "${EMAIL_RECIPIENT}",
                subject: "SUCCESS: ${currentBuild.fullDisplayName}",
                body: """
                <html>
                <body>
                <h2>Jenkins Pipeline Build Succeeded</h2>
                <p><strong>Build:</strong> ${currentBuild.fullDisplayName}</p>
                <p><strong>Branch:</strong> ${GITHUB_REPO}</p>
                <p><a href="${env.BUILD_URL}">Click here</a> to view details.</p>
                </body></html>
                """,
                mimeType: 'text/html',
                attachLog: true
            )
        }
        failure {
            script {
                echo "Jenkins Pipeline Failed! Sending email notification."
                def buildStatus = currentBuild.result ?: "FAILED"
                def buildDuration = currentBuild.durationString
                def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('UTC'))

                emailext (
                    to: "${EMAIL_RECIPIENT}",
                    subject: "Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: """
                    <html>
                    <body>
                    <h2>Jenkins Pipeline Failure Notification</h2>
                    <p><strong>Build Status:</strong> ${buildStatus}</p>
                    <p><strong>Failed Stage:</strong> ${failedStage}</p>
                    <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
                    <p><strong>Build Duration:</strong> ${buildDuration}</p>
                    <p><strong>Timestamp (UTC):</strong> ${timestamp}</p>
                    <p><strong>Job:</strong> <a href="${env.BUILD_URL}">${env.JOB_NAME} #${env.BUILD_NUMBER}</a></p>
                    <p>Please check the <a href="${env.BUILD_URL}console">Jenkins Console Logs</a> for full details.</p>
                    </body></html>
                    """,
                    mimeType: 'text/html',
                    attachLog: true
                )
            }
        }
        unstable {
            emailext (
                to: "${EMAIL_RECIPIENT}",
                subject: "UNSTABLE: ${currentBuild.fullDisplayName}",
                body: """
                <html>
                <body>
                <h2>Jenkins Pipeline is Unstable</h2>
                <p>The build <strong>${currentBuild.fullDisplayName}</strong> completed with warnings.</p>
                <p>Please check the results at <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>.</p>
                </body></html>
                """,
                mimeType: 'text/html',
                attachLog: true
            )
        }
    }
}
