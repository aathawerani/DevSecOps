def failedStage = "Unknown Stage"  // Variable to track failed stage
pipeline {
	agent any
	environment {
        SONAR_HOST = 'http://localhost:9000'
        SONARQUBE_TOKEN = credentials('c5ce0640-9155-42e4-9756-b09c801bf2f1') // Replace with your credential ID
        GIT_CREDENTIALS_ID = 'github-credentials'
        GITHUB_REPO = 'aathawerani/PaymentGateway'
        GITHUB_TOKEN = credentials('github-token')
        EMAIL_RECIPIENT = 'athawerani@gmail.com'
        FRONTEND_DIR = "frontend"
        BACKEND_DIR = "backend"
        SONAR_PROJECT = 'PaymentGateway'
        DEFECTDOJO_HOST = 'http://localhost:8080'
        DEFECTDOJO_ENGAGEMENT_ID = '3' // Replace with your real engagement ID
    }
	stages{
		stage('Checkout'){
			steps{
				script {
					failedStage = "Checkout"  //Set stage name
                }
				git branch: 'main', credentialsId: '3ddb38d7-5108-4fae-865b-0120e45b2a0f', url: 'https://github.com/aathawerani/PaymentGateway.git'
			}
		}
		/*stage('Install Dependencies') {
            steps {
                script {
                    failedStage = "Install Dependencies"
                }
                dir(FRONTEND_DIR) {
                    bat "npm install  --legacy-peer-deps"
                }
                dir(BACKEND_DIR) {
                    bat "npm install"
                }
            }
        }
		stage('Dependency Check') {
            steps {
	            script {
	        		failedStage = "Dependency Check"  //Set stage name
	        	}
                bat '"D:\\DevOps\\Dependency-Check\\bin\\dependency-check.bat" --project "PaymentGateway" --scan . --format HTML --out dependency-check-report --nvdApiKey da276fc5-0eba-4a30-88ec-220c690c9d53 --yarn "C:\\Users\\ali.thawerani\\AppData\\Roaming\\npm\\yarn.cmd"'
			}
		}
		stage('SonarQube Analysis') {
            steps {
                script {
                    failedStage = "SonarQube Analysis"
                }
                withSonarQubeEnv('SonarQube') {
                	withEnv(["JAVA_HOME=C:\\Program Files\\Microsoft\\jdk-17.0.8.7-hotspot\\bin"]) {
                    	bat 'npx sonarqube-scanner'
		            }
                }
            }
        }*/
        stage('Download SonarQube Report') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'c5ce0640-9155-42e4-9756-b09c801bf2f1', variable: 'SONAR_TOKEN')]) {
					    def response = httpRequest(
					        url: "${env.SONAR_HOST}/api/issues/search?componentKeys=${env.SONAR_PROJECT}",
					        httpMode: 'GET',
					        customHeaders: [[name: 'Authorization', value: "Bearer ${SONAR_TOKEN}"]],
					        validResponseCodes: '200',
					        contentType: 'APPLICATION_JSON'
					    )
					    writeFile file: 'sonar-report.json', text: response.content
					}
                }
            }
        }
		stage('Upload to DefectDojo') {
            steps {
                script {
                    def dojoToken = credentials('dojo-api-token')
                    def curlCommand = """
                        curl -X POST "${env.DEFECTDOJO_HOST}/api/v2/import-scan/" \
                        -H "Authorization: Token ${dojoToken}" \
                        -H "accept: application/json" \
                        -H "Content-Type: multipart/form-data" \
                        -F "file=@sonar-report.json" \
                        -F "scan_type=SonarQube Scan" \
                        -F "engagement=${env.DEFECTDOJO_ENGAGEMENT_ID}" \
                        -F "minimum_severity=Info" \
                        -F "active=true" \
                        -F "verified=false"
                    """

                    if (isUnix()) {
                        sh curlCommand
                    } else {
                        bat "powershell -Command \"${curlCommand.replace('"', '`"')}\""
                    }
                }
            }
        }
		/*stage('Build') {
		    steps {
		        script {
		            failedStage = "Build"
		        }
		        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
		            dir(FRONTEND_DIR) {
		                bat "npm run build"
		            }
		            dir(BACKEND_DIR) {
		                bat "npm run build"
		            }
		        }
		    }
		}
		stage('Create Pull Request to Deployment') {
		    steps {
		        script {
		    		failedStage = "Pull Request"  // âœ… Set stage name
		            def GITHUB_TOKEN = credentials('github-token')  // GitHub Token stored in Jenkins credentials
		            def GITHUB_USERNAME = "aathawerani"  // Replace with your GitHub username
		            def GITHUB_EMAIL = "athawerani@gmail.com"
		            def REPO = "aathawerani/PaymentGateway"  // Replace with your repo name
		            def SOURCE_BRANCH = "main"
		            def TARGET_BRANCH = "deployment"
		            def PR_TITLE = "Automated PR: Merge ${SOURCE_BRANCH} into ${TARGET_BRANCH}"
		            def PR_BODY = "This PR was automatically generated by Jenkins."

		            // Set the correct Git user in Jenkins
		            bat "git config --global user.name \"${GITHUB_USERNAME}\""
		            bat "git config --global user.email \"${GITHUB_EMAIL}\""

		            // Create a pull request using GitHub API
					withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
					    bat """
					        "D:\\DevOps\\curl\\bin\\curl.exe" -X POST ^
					             -H "Authorization: token %GITHUB_TOKEN%" ^
					             -H "Accept: application/vnd.github.v3+json" ^
					             https://api.github.com/repos/aathawerani/PaymentGateway/pulls ^
					             -d "{\\"title\\": \\"Automated PR: Merge main into deployment\\", \\"body\\": \\"This PR was automatically generated by Jenkins.\\", \\"head\\": \\"main\\", \\"base\\": \\"deployment\\"}"
					    """
					}
		        }
		    }
		}*/
	}
	post {
        success {
            emailext (
	            to: "${EMAIL_RECIPIENT}",
	            subject: "SUCCESS: ${currentBuild.fullDisplayName}",
	            body: "The build ${currentBuild.fullDisplayName} succeeded. Check it out at ${env.BUILD_URL}.",
	            mimeType: 'text/html',
	            attachLog: true,
	            attachmentsPattern: "sonar-report.json, dependency-check-report/dependency-check-report.html"
	        )
        }
		failure {
		    script {
        
		        def buildStatus = currentBuild.result ?: "FAILED"
		        def failedStageMessage = "Pipeline failed at stage: ${failedStage}"
		        def buildDuration = currentBuild.durationString
		        def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('UTC'))

		        emailext (
		            to: "${EMAIL_RECIPIENT}",
		            subject: "FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
		            body: "The build failed at stage: ${failedStage}. Check the logs at ${env.BUILD_URL}.",
		            mimeType: 'text/html',
		            attachLog: true,
		            attachmentsPattern: "sonar-report.json, dependency-check-report/dependency-check-report.html"
		        )
		    }
		}
    }
}