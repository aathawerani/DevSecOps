def failedStage = "Unknown Stage"  // Variable to track failed stage
pipeline {
	agent any
	environment {
        SONARQUBE_URL = 'http://localhost:9000'
        SONARQUBE_TOKEN = credentials('c5ce0640-9155-42e4-9756-b09c801bf2f1') // Replace with your credential ID
        GIT_CREDENTIALS_ID = 'github-credentials'
        GITHUB_REPO = 'aathawerani/PaymentGateway'
        GITHUB_TOKEN = credentials('github-token')
        EMAIL_RECIPIENT = 'athawerani@gmail.com'
        FRONTEND_DIR = "frontend"
        BACKEND_DIR = "backend"
    }
	stages{
		stage('Checkout'){
			steps{
				script {
					failedStage = "Checkout"  //Set stage name
                }
				git branch: 'main', credentialsId: '3ddb38d7-5108-4fae-865b-0120e45b2a0f', url: 'https://github.com/aathawerani/PaymentGateway.git'
			}
		}
		stage('Install Dependencies') {
            steps {
                script {
                    failedStage = "Install Dependencies"
                }
                dir(FRONTEND_DIR) {
                    bat "npm install  --legacy-peer-deps"
                    bat '"C:\\Users\\ali.thawerani\\AppData\\Roaming\\npm\\yarn" install'
                }
                dir(BACKEND_DIR) {
                    bat "npm install"
                    bat '"C:\\Users\\ali.thawerani\\AppData\\Roaming\\npm\\yarn" install'
                }
            }
        }
		stage('Dependency Check') {
            steps {
	            script {
	        		failedStage = "Dependency Check"  //Set stage name
	        	}
                bat '"D:\\DevOps\\Dependency-Check\\bin\\dependency-check.bat" --project "PaymentGateway" --scan . --format HTML --out dependency-check-report --nvdApiKey da276fc5-0eba-4a30-88ec-220c690c9d53 --log dependency-check.log'
			}
		}
		stage('Security Audit') {
            steps {
                script {
                    failedStage = "Security Audit"
                }
                dir(FRONTEND_DIR) {
                	bat 'npm audit --json > audit-report-frontend.json'
                	//bat 'retire --path . --outputformat json > retire-frontend.json'
                	//bat 'audit-html --input audit-report-frontend.json --output audit-report-frontend.html'
                	//bat 'retire --path frontend --outputformat html --outputfile retire-frontend.html'
                }
                dir(BACKEND_DIR) {
                	bat 'npm audit --json > audit-report-backend.json'
                	bat 'retire --path . --outputformat json > retire-backend.json'
                	bat 'audit-html --input audit-report-backend.json --output audit-report-backend.html'
                	bat 'retire --path backend --outputformat html --outputfile retire-backend.html'
                }
            }
        }
		stage('SonarQube Analysis') {
            steps {
                script {
                    failedStage = "SonarQube Analysis"
                }
                withSonarQubeEnv('SonarQube') {
                    bat 'cd frontend && npx sonarqube-scanner'
                    bat 'cd backend && npx sonarqube-scanner'
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    failedStage = "Build"
                }
                dir(FRONTEND_DIR) {
                    bat "npm run build"
                }
                dir(BACKEND_DIR) {
                    bat "npm run build"
                }
            }
        }
		stage('Create Pull Request to Deployment') {
		    steps {
		        script {
		    		failedStage = "Pull Request"  // âœ… Set stage name
		            def GITHUB_TOKEN = credentials('github-token')  // GitHub Token stored in Jenkins credentials
		            def GITHUB_USERNAME = "aathawerani"  // Replace with your GitHub username
		            def GITHUB_EMAIL = "athawerani@gmail.com"
		            def REPO = "aathawerani/PaymentGateway"  // Replace with your repo name
		            def SOURCE_BRANCH = "main"
		            def TARGET_BRANCH = "deployment"
		            def PR_TITLE = "Automated PR: Merge ${SOURCE_BRANCH} into ${TARGET_BRANCH}"
		            def PR_BODY = "This PR was automatically generated by Jenkins."

		            // Set the correct Git user in Jenkins
		            bat "git config --global user.name \"${GITHUB_USERNAME}\""
		            bat "git config --global user.email \"${GITHUB_EMAIL}\""

		            // Create a pull request using GitHub API
					withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
					    bat """
					        "D:\\DevOps\\curl\\bin\\curl.exe" -X POST ^
					             -H "Authorization: token %GITHUB_TOKEN%" ^
					             -H "Accept: application/vnd.github.v3+json" ^
					             https://api.github.com/repos/aathawerani/Utilitites/pulls ^
					             -d "{\\"title\\": \\"Automated PR: Merge main into deployment\\", \\"body\\": \\"This PR was automatically generated by Jenkins.\\", \\"head\\": \\"main\\", \\"base\\": \\"deployment\\"}"
					    """
					}
		        }
		    }
		}
	}
	post {
        success {
        	script {
	            def sonarReportPath = "sonar-report.html"
	            bat "curl -s -u admin:admin http://localhost:9000/api/issues/search?componentKeys=PaymentGateway > sonar-report.json"
	            bat "jq '.' sonar-report.json > ${sonarReportPath}"
	        }
            emailext (
	            to: "${EMAIL_RECIPIENT}",
	            subject: "SUCCESS: ${currentBuild.fullDisplayName}",
	            body: "The build ${currentBuild.fullDisplayName} succeeded. Check it out at ${env.BUILD_URL}.",
	            mimeType: 'text/html',
	            attachLog: true,
	            attachmentsPattern: "audit-report-frontend.html, audit-report-backend.html, retire-frontend.html, retire-backend.html, sonar-report.html"
	        )
        }
		failure {
		    script {
		        def sonarReportPath = "sonar-report.html"
		        bat "curl -s -u admin:admin http://localhost:9000/api/issues/search?componentKeys=PaymentGateway > sonar-report.json"
		        bat "jq '.' sonar-report.json > ${sonarReportPath}"
        
		        def buildStatus = currentBuild.result ?: "FAILED"
		        def failedStageMessage = "Pipeline failed at stage: ${failedStage}"
		        def buildDuration = currentBuild.durationString
		        def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('UTC'))

		        emailext (
		            to: "${EMAIL_RECIPIENT}",
		            subject: "FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
		            body: "The build failed at stage: ${failedStage}. Check the logs at ${env.BUILD_URL}.",
		            mimeType: 'text/html',
		            attachLog: true,
		            attachmentsPattern: "audit-report-frontend.html, audit-report-backend.html, retire-frontend.html, retire-backend.html, sonar-report.html"
		        )
		    }
		}
    }
}