pipeline {
    agent any
    environment {
        // Git Configuration
        GIT_CREDENTIALS_ID = 'github-credentials'
        GITHUB_REPO = 'aathawerani/PaymentGateway'
        GITHUB_TOKEN = credentials('github-token')
        
        // Azure Configuration
        AZURE_CREDENTIALS_ID = 'azure-prod-sp'
        AZURE_SUBSCRIPTION = 'f12a172b-b284-45ca-8c4b-3833481d3088'
        LOCATION = 'eastus'
        
        // Generate unique identifiers
        uuidPart = "${UUID.randomUUID().toString().substring(0,8)}"

        // Image Configuration
        IMAGE_TAG = "latest"
        SQL_ADMIN_USER = "sa"
    }
    
    stages {
        stage('Setup Variables') {
            steps {
                script {
                    // Set all environment variables
                    env.DEPLOYMENT_ID = "pg-${uuidPart}"
                    env.RESOURCE_GROUP = "rg-${env.DEPLOYMENT_ID}"
                    env.STORAGE_ACCOUNT = "sa${uuidPart}"
                    env.AZURE_REGISTRY = "acr${uuidPart}"
                    env.FRONTEND_IMAGE = "${env.AZURE_REGISTRY}.azurecr.io/frontend-app"
                    env.BACKEND_IMAGE = "${env.AZURE_REGISTRY}.azurecr.io/backend-app"
                    env.SQL_SERVER_NAME = "sql-${env.DEPLOYMENT_ID}"
                    env.SQL_DB_NAME = "db-${env.DEPLOYMENT_ID}"
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: env.GIT_CREDENTIALS_ID,
                        url: "https://github.com/${GITHUB_REPO}.git"
                    ]]
                ])
            }
        }

        stage('Initial Terraform Setup') {
            steps {
                dir('terraform') {
                    withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                        bat """
                            call az login --service-principal ^
                                -u %AZURE_CLIENT_ID% ^
                                -p %AZURE_CLIENT_SECRET% ^
                                --tenant %AZURE_TENANT_ID%
                            call az account set --subscription ${AZURE_SUBSCRIPTION}

                            D:\\DevOps\\terraform\\terraform init -reconfigure
                            
                            D:\\DevOps\\terraform\\terraform apply -auto-approve ^
                                -target=azurerm_resource_group.main ^
                                -target=azurerm_storage_account.storage ^
                                -target=azurerm_storage_container.tfstate ^
                                -target=azurerm_container_registry.acr ^
                                -var="resource_group_name=${RESOURCE_GROUP}" ^
                                -var="location=${LOCATION}" ^
                                -var="storage_account_name=${STORAGE_ACCOUNT}" ^
                                -var="acr_name=${AZURE_REGISTRY}" ^
                                -var="azure_subscription_id=${AZURE_SUBSCRIPTION}"
                        """
                        
                        // Get ACR credentials for Docker operations
                        script {
                            env.ACR_LOGIN_SERVER = bat(
                                script: 'D:\\DevOps\\terraform\\terraform output -raw acr_login_server',
                                returnStdout: true
                            ).trim()
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Frontend Build') {
                    steps {
                        dir('frontend') {
                            bat """
                                docker build --platform linux/amd64 ^
                                    -t ${FRONTEND_IMAGE}:${IMAGE_TAG} .
                            """
                        }
                    }
                }
                stage('Backend Build') {
                    steps {
                        dir('backend') {
                            bat """
                                docker build --platform linux/amd64 ^
                                    -t ${BACKEND_IMAGE}:${IMAGE_TAG} .
                            """
                        }
                    }
                }
            }
        }

        stage('Push to ACR') {
            steps {
                withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                    retry(3) {
                        bat """
                            call az acr login --name ${AZURE_REGISTRY}
                            docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                            docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Complete Terraform Deployment') {
            steps {
                dir('terraform') {
                    withCredentials([
                        azureServicePrincipal(AZURE_CREDENTIALS_ID),
                        usernamePassword(
                            credentialsId: 'sql-admin-password',
                            usernameVariable: 'SQL_ADMIN_USER',
                            passwordVariable: 'SQL_ADMIN_PASSWORD'
                        )
                    ]) {
                        bat """
                            D:\\DevOps\\terraform\\terraform init ^
                                -backend-config="resource_group_name=${RESOURCE_GROUP}" ^
                                -backend-config="storage_account_name=${STORAGE_ACCOUNT}" ^
                                -backend-config="container_name=tfstate" ^
                                -backend-config="key=paymentgateway-${RESOURCE_GROUP}.tfstate" ^
                                -backend-config="subscription_id=${AZURE_SUBSCRIPTION}" ^
                                -reconfigure
                            
                            D:\\DevOps\\terraform\\terraform apply -auto-approve ^
                                -var="resource_group_name=${RESOURCE_GROUP}" ^
                                -var="location=${LOCATION}" ^
                                -var="sql_server_name=${SQL_SERVER_NAME}" ^
                                -var="sql_db_name=${SQL_DB_NAME}" ^
                                -var="sql_admin_username=${SQL_ADMIN_USER}" ^
                                -var="sql_admin_password=${SQL_ADMIN_PASSWORD}" ^
                                -var="frontend_image=${FRONTEND_IMAGE}:${IMAGE_TAG}" ^
                                -var="backend_image=${BACKEND_IMAGE}:${IMAGE_TAG}" ^
                                -var="acr_name=${AZURE_REGISTRY}" ^
                                -var="storage_account_name=${STORAGE_ACCOUNT}" ^
                                -var="azure_subscription_id=${AZURE_SUBSCRIPTION}"
                        """
                    }
                }
            }
        }

        stage('Get Endpoints') {
            steps {
                dir('terraform') {
                    script {
                        env.APP_URL = bat(
                            script: 'D:\\DevOps\\terraform\\terraform output -raw frontend_url', 
                            returnStdout: true
                        ).trim()
                        env.SQL_CONNECTION_STRING = bat(
                            script: 'D:\\DevOps\\terraform\\terraform output -raw sql_connection_string', 
                            returnStdout: true
                        ).trim()
                        
                        echo "Application URL: ${env.APP_URL}"
                        echo "SQL Connection String: ${env.SQL_CONNECTION_STRING}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                def deploymentInfo = [
                    deployment_id: env.DEPLOYMENT_ID,
                    resource_group: env.RESOURCE_GROUP,
                    storage_account: env.STORAGE_ACCOUNT,
                    acr_name: env.AZURE_REGISTRY,
                    sql_server: env.SQL_SERVER_NAME,
                    sql_db: env.SQL_DB_NAME,
                    build_number: env.BUILD_NUMBER,
                    build_url: env.BUILD_URL,
                    app_url: env.APP_URL,
                    sql_connection: env.SQL_CONNECTION_STRING
                ]
                
                writeJSON file: 'deployment_info.json', json: deploymentInfo
                archiveArtifacts artifacts: 'deployment_info.json'
                
                emailext body: """
                    Deployment ${currentBuild.currentResult} - ${deploymentInfo.deployment_id}
                    
                    Application URL: ${deploymentInfo.app_url}
                    SQL Server: ${deploymentInfo.sql_server}.database.windows.net
                    
                    Build Details: ${deploymentInfo.build_url}
                    
                    To destroy this deployment:
                    1. Go to the 'paymentgateway-destroy' pipeline
                    2. Select build #${deploymentInfo.build_number}
                """,
                subject: "Deployment ${currentBuild.currentResult}: ${deploymentInfo.deployment_id}",
                to: "athawerani@gmail.com"
            }
        }
        
        cleanup {
            cleanWs()
        }
    }
}