pipeline {
    agent any
    environment {
        // Git Configuration
        GIT_CREDENTIALS_ID = 'github-credentials'
        GITHUB_REPO = 'aathawerani/PaymentGateway'
        GITHUB_TOKEN = credentials('github-token')
        
        // Azure Configuration
        AZURE_CREDENTIALS_ID = 'azure-prod-sp'
        AZURE_SUBSCRIPTION = 'f12a172b-b284-45ca-8c4b-3833481d3088'
        AZURE_REGISTRY = 'devsecops'
        LOCATION = 'eastus'
        
        // Resource Naming
        RESOURCE_GROUP = "pg-demo"
        STORAGE_ACCOUNT = "pgdemostorage"
        SQL_SERVER_NAME = "sql-server-pg"
        SQL_DB_NAME = "paymentgateway"
        SQL_ADMIN_USER = "sa"
        
        // Image Configuration
        FRONTEND_IMAGE = "${AZURE_REGISTRY}.azurecr.io/frontend-app"
        BACKEND_IMAGE = "${AZURE_REGISTRY}.azurecr.io/backend-app"
        IMAGE_TAG = "latest"
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    failedStage = "Checkout"
                }
                git branch: 'main', credentialsId: '3ddb38d7-5108-4fae-865b-0120e45b2a0f', url: 'https://github.com/aathawerani/PaymentGateway.git'
            }
        }

        stage('Azure Setup') {
            steps {
                withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                    bat """
                        call az login --service-principal ^
                            -u %AZURE_CLIENT_ID% ^
                            -p %AZURE_CLIENT_SECRET% ^
                            --tenant %AZURE_TENANT_ID%

                        call az account set --subscription ${AZURE_SUBSCRIPTION}

                        call az group create --name ${RESOURCE_GROUP} --location ${LOCATION}

                        call az storage account create ^
                            --name ${STORAGE_ACCOUNT} ^
                            --resource-group ${RESOURCE_GROUP} ^
                            --sku Standard_LRS ^
                            --location ${LOCATION}

                        call az storage container create ^
                            --name tfstate ^
                            --account-name ${STORAGE_ACCOUNT} 
                    """
                }
            }
        }

        stage('Create Azure Container Registry') {
            steps {
                withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                    bat """                        
                        az acr create --name ${AZURE_REGISTRY} ^
                            --resource-group ${RESOURCE_GROUP} ^
                            --sku Basic ^
                            --admin-enabled true ^
                            --location ${LOCATION}
                    """
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Frontend Build') {
                    steps {
                        dir('frontend') {
                            bat """
                                docker build --platform linux/amd64 \
                                    -t ${FRONTEND_IMAGE}:${IMAGE_TAG} .
                            """
                        }
                    }
                }
                stage('Backend Build') {
                    steps {
                        dir('backend') {
                            bat """
                                docker build --platform linux/amd64 \
                                    -t ${BACKEND_IMAGE}:${IMAGE_TAG} .
                            """
                        }
                    }
                }
            }
        }
        
        stage('Push to Azure Container Registry') {
            steps {
                withCredentials([azureServicePrincipal(AZURE_CREDENTIALS_ID)]) {
                    bat """
                        az acr login --name ${AZURE_REGISTRY}
                        docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
                        docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('terraform') {
                    withCredentials([
                        azureServicePrincipal(AZURE_CREDENTIALS_ID), 
                        usernamePassword(
                            credentialsId: 'sql-admin-password', 
                            usernameVariable: 'SQL_ADMIN_USER', 
                            passwordVariable: 'SQL_ADMIN_PASSWORD'
                        )
                    ]) {
                        bat """

                            az login --service-principal ^
                            -u ${AZURE_CLIENT_ID} ^
                            -p ${AZURE_CLIENT_SECRET} ^
                            --tenant ${AZURE_TENANT_ID}
                            az account set --subscription ${AZURE_SUBSCRIPTION}

                            D:\\DevOps\\terraform\\terraform init ^
                                -backend-config="resource_group_name=${RESOURCE_GROUP}" ^
                                -backend-config="storage_account_name=${STORAGE_ACCOUNT}" ^
                                -backend-config="container_name=tfstate" ^
                                -backend-config="key=${RESOURCE_GROUP}.tfstate"
                            
                            D:\\DevOps\\terraform\\terraform apply -auto-approve ^
                                -var="resource_group_name=${RESOURCE_GROUP}" ^
                                -var="location=${LOCATION}" ^
                                -var="sql_server_name=${SQL_SERVER_NAME}" ^
                                -var="sql_db_name=${SQL_DB_NAME}" ^
                                -var="sql_admin_username=${SQL_ADMIN_USER}" ^
                                -var="sql_admin_password=${SQL_ADMIN_PASSWORD}" ^
                                -var="frontend_image=${FRONTEND_IMAGE}:${IMAGE_TAG}" ^
                                -var="backend_image=${BACKEND_IMAGE}:${IMAGE_TAG}"
                        """
                    }
                }
            }
        }

        stage('Get Endpoints') {
            steps {
                dir('terraform') {
                    script {
                        env.APP_URL = bat(
                            script: 'D:\\DevOps\\terraform\\terraform output -raw frontend_url', 
                            returnStdout: true
                        ).trim()
                        env.SQL_CONNECTION_STRING = bat(
                            script: 'D:\\DevOps\\terraform\\terraform output -raw sql_connection_string', 
                            returnStdout: true
                        ).trim()
                        
                        echo "Application URL: ${env.APP_URL}"
                        echo "SQL Connection String: ${env.SQL_CONNECTION_STRING}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            emailext body: """
                Deployment ${currentBuild.currentResult} for Build ${BUILD_NUMBER}
                
                Application URL: ${env.APP_URL}
                SQL Server: ${SQL_SERVER_NAME}.database.windows.net
                
                ${env.DEPLOYMENT_INFO}
                
                Jenkins build: ${BUILD_URL}
            """,
            subject: "Deployment ${currentBuild.currentResult}: PaymentGateway ${BUILD_NUMBER}",
            to: "athawerani@gmail.com"            
        }
    }
}