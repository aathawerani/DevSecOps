# Build stage
FROM --platform=linux/amd64 node:18-alpine AS builder
# Install Python and build dependencies for SQL Server
RUN apk add --no-cache python3 make g++ unixodbc-dev curl gnupg
# Add Microsoft repository and install ODBC Driver for SQL Server
RUN curl -O https://download.microsoft.com/download/e/4/e/e4e67866-dffd-428c-aac7-8d28ddafb39b/msodbcsql17_17.10.4.1-1_amd64.apk && \
    apk add --allow-untrusted msodbcsql17_17.10.4.1-1_amd64.apk && \
    rm msodbcsql17_17.10.4.1-1_amd64.apk
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .

# Production stage
FROM --platform=linux/amd64 node:18-alpine
RUN apk add --no-cache \
    python3 \
    curl \
    unixodbc-dev \
    && rm -rf /var/cache/apk/*
# Add Microsoft ODBC Driver
RUN curl -O https://download.microsoft.com/download/e/4/e/e4e67866-dffd-428c-aac7-8d28ddafb39b/msodbcsql17_17.10.4.1-1_amd64.apk && \
    apk add --allow-untrusted msodbcsql17_17.10.4.1-1_amd64.apk && \
    rm msodbcsql17_17.10.4.1-1_amd64.apk

RUN addgroup -S appgroup && adduser -S appuser -G appgroup
WORKDIR /usr/src/app
COPY --from=builder --chown=appuser:appgroup /usr/src/app/node_modules ./node_modules
COPY --chown=appuser:appgroup . .

ENV NODE_ENV=production \
    PORT=5001 \
    NPM_CONFIG_LOGLEVEL=error

HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

ENV SECURITY_HEADERS="true" \
    STRICT_TRANSPORT_SECURITY="max-age=31536000; includeSubDomains" \
    X_FRAME_OPTIONS="DENY" \
    X_CONTENT_TYPE_OPTIONS="nosniff" \
    REFERRER_POLICY="strict-origin-when-cross-origin" \
    X_PERMITTED_CROSS_DOMAIN_POLICIES="none" \
    X_XSS_PROTECTION="1; mode=block"

USER appuser
EXPOSE 5001

COPY --chown=appuser:appgroup docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["node", "server.js"]